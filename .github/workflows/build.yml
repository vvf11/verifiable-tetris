name: Build and Deploy
on:
  push:
    branches: [main]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions/setup-rust@v1
        with:
          rust-version: nightly # Используем ночную версию Rust для поддержки -Zbuild-std
          target: wasm32-unknown-unknown
          components: rustfmt, clippy
          override: true
      - name: Install WASM Target
        run: rustup target add wasm32-unknown-unknown
      - name: Install SP1 Toolchain with sp1up
        run: |
          curl -L https://sp1up.succinct.xyz | bash -s -- --yes
          # Находим путь установки sp1up
          SP1UP_PATH=$(find /home/runner -name sp1up 2>/dev/null | head -n 1 | xargs dirname || echo "/home/runner/.sp1/bin")
          echo "SP1UP found at: $SP1UP_PATH"
          # Добавляем путь в PATH текущей сессии
          export PATH="$SP1UP_PATH:$PATH"
          echo "$SP1UP_PATH" >> $GITHUB_PATH
          echo "/home/runner/.local/bin" >> $GITHUB_PATH
          # Проверяем, установлен ли sp1up
          which sp1up || (echo "sp1up not found in PATH"; exit 1)
          # Запускаем sp1up для установки succinct toolchain и cargo prove
          sp1up
      - name: Verify SP1 Installation
        run: |
          cargo prove --version
          RUSTUP_TOOLCHAIN=succinct cargo --version
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './example/fibonacci-program ./verifier'
          key: v1-rust-build-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            v1-rust-build-${{ runner.os }}-
      - name: Clear Rust Cache
        run: cargo clean
      - name: Set RUST_BACKTRACE
        run: echo "RUST_BACKTRACE=full" >> $GITHUB_ENV
      - name: Create target directory
        run: mkdir -p target
      - name: Set CARGO_TARGET_DIR
        run: echo "CARGO_TARGET_DIR=target" >> $GITHUB_ENV
      - name: Set RUSTUP_TOOLCHAIN
        run: echo "RUSTUP_TOOLCHAIN=succinct" >> $GITHUB_ENV
      - name: Build Tetris Program ELF
        run: |
          cd example/fibonacci-program
          cargo +nightly prove build --locked # Используем ночную версию для всех шагов
      - name: Build Verifier WASM
        run: |
          cd verifier
          cargo +nightly build --release --target wasm32-unknown-unknown --locked -Zbuild-std
          wasm-bindgen --target web --no-typescript --out-dir ../ target/wasm32-unknown-unknown/release/tetris-verifier.wasm
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
